using System.IO.Compression;
using System.Runtime.InteropServices;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;
using Transcription.Common.Enums;
using Transcription.DAL.Models;
using Transcription.DAL.Repositories;
using File = System.IO.File;
using User = Telegram.Bot.Types.User;

namespace Trascribition.Services;

public class HandleUpdateService
{
    private readonly ITelegramBotClient _botClient;

    private readonly UserRepository _userRepository;

    private readonly ChatStateRepository _chatStateRepository;

    private readonly YandexRequestRepository _yandexRequestRepository;
    private readonly ILogger<HandleUpdateService> _logger;

    public HandleUpdateService(ITelegramBotClient botClient, UserRepository userRepository, ChatStateRepository chatStateRepository, YandexRequestRepository yandexRequestRepository, ILogger<HandleUpdateService> logger)//, ILogger<HandleUpdateService> logger)
    {
        _botClient = botClient;
        _userRepository = userRepository;
        _chatStateRepository = chatStateRepository;
        _yandexRequestRepository = yandexRequestRepository;
        _logger = logger;
    }

    public async Task EchoAsync(Update update)
    {
        var handler = update.Type switch
        {
            // UpdateType.Unknown:
            // UpdateType.ChannelPost:
            // UpdateType.EditedChannelPost:
            // UpdateType.ShippingQuery:
            // UpdateType.PreCheckoutQuery:
            // UpdateType.Poll:
            UpdateType.Message            => BotOnMessageReceived(update.Message!),
            _                             => UnknownUpdateHandlerAsync(update)
        };

        try
        {
            await handler;
        }
        catch (Exception exception)
        {
            await HandleErrorAsync(_botClient, exception);
        }
    }

    private async Task BotOnMessageReceived(Message message)
    {
        //_logger.LogInformation("Receive message type: {MessageType}", message.Type);
        if (message.Type != MessageType.Text)
        {
            //return;
            if (message.Audio is not null)
            {
                var file = await _botClient.GetFileAsync(message.Audio.FileId);
                
                if (file.FilePath.EndsWith(".m4a"))
                {
                    Directory.CreateDirectory($"{AppDomain.CurrentDomain.BaseDirectory}/Files/{message.Chat.Id}");
                    
                    var files = Directory.GetFiles($"{AppDomain.CurrentDomain.BaseDirectory}/Files/{message.Chat.Id}");
                    
                    if (files.Length == 2)
                    {
                        await _botClient.SendTextMessageAsync(chatId: message.Chat.Id, @$"–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è 2 —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /run —á—Ç–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç—å –∏—Ö. –ò–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª—ã /clearStorage, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É");
                        return;
                    }

                    var fileName = message.Audio.FileName +"-"+  Guid.NewGuid().ToString() + ".m4a";
                    
                    var fileStream = File.Create(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}{Path.DirectorySeparatorChar}{fileName}");

                    await _botClient.DownloadFileAsync(file.FilePath, fileStream);
                
                    fileStream.Close();
                    await fileStream.DisposeAsync();

                    await _botClient.SendTextMessageAsync(chatId: message.Chat.Id, $"{message.Audio.FileName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
                    
                    if (files.Length == 1)
                    {
                        await _botClient.SendTextMessageAsync(chatId: message.Chat.Id, @$"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ 2 —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /run —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é"); 
                    }
                    
                }
            }
            
            return;
        }

        var action = message.Text!.Split(' ')[0] switch
        {
            "/start"   => OnStart(_botClient, message),
            "/run"   =>   OnRun(_botClient, message),
            "/clearStorage"   =>   OnClearStorage(_botClient, message),
            "/storageInfo"   =>   OnStorageInfo(_botClient, message),
            "/usage"   =>   Usage(_botClient, message),
            "/topup"   =>   OnTopUp(_botClient, message),
            "/balance"   =>   OnBalance(_botClient, message),
            _           => Help(_botClient, message)
        };
        Message sentMessage = await action;
        //_logger.LogInformation("The message was sent with id: {SentMessageId}", sentMessage.MessageId);

        // Send inline keyboard
        // You can process responses in BotOnCallbackQueryReceived handle
    }

    async Task<Message> OnStart(ITelegramBotClient bot, Message message)
    {
        var welcomeMessage = "üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã." + Environment.NewLine + Environment.NewLine
            + "ü§ñ –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ—á–∏ –≤ —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é *SpeechKit* - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Yandex. " + "–ï–π –¥–æ–≤–µ—Ä—è—é—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã call-—Ü–µ–Ω—Ç—Ä–æ–≤ —Ç–∞–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ : *–¢–∏–Ω—å–∫–æ—Ñ—Ñ*, *–í–¢–ë*, *Lamoda* –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. " + Environment.NewLine + Environment.NewLine
            + "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –∏–∑ Zoom - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Zoom:" + Environment.NewLine
            +"1Ô∏è‚É£"+" –ó–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ZOOM." + Environment.NewLine
            + "2Ô∏è‚É£" +@" –ü–µ—Ä–µ–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É *""–ó–∞–ø–∏—Å—å""*." + Environment.NewLine
            + "3Ô∏è‚É£"+ @" –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –≤ *""–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞""*.";
        
        await bot.SendPhotoAsync(chatId: message.Chat.Id,
            new InputOnlineFile(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Init2.jpg")),
            caption: welcomeMessage,
            parseMode: ParseMode.Markdown);

        if ((!await _userRepository.IsUserExists(message.Chat.Id)))
        {
            await _userRepository.Insert(new Transcription.DAL.Models.User()
            {
                UserChatId = message.Chat.Id,
                IsActive = true,
                ApiKey = string.Empty,
                FirstName = message.From.FirstName,
                LastName = message.From.LastName,
                UserName = message.From.Username,
                Balance = 0,
                ChatState = new ChatState()
                {
                    UserChatId = message.Chat.Id,
                    State = ChatSate.Configuration
                }
            });
        }
        
        return await Help(bot, message);
    }

    async Task<Message> OnRun(ITelegramBotClient bot, Message message)
    {
        if (await _userRepository.IsUserExists(message.Chat.Id))
        {
            var user = await _userRepository.GetAsync(message.Chat.Id);

            if (user.Balance < 500)
            {
                return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
                    $"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ü•≤" + Environment.NewLine + "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ *500* —Ä—É–±–ª–µ–π" +
                    Environment.NewLine +$"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å *{user.Balance}*",
                    parseMode: ParseMode.Markdown);
            }

            user.Balance -= 500;

            await _userRepository.Update(user);
            
            if (!Directory.Exists(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}"))
            {
                return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
                    $"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ : {2}");
            }

            var files = Directory.GetFiles($"{AppDomain.CurrentDomain.BaseDirectory}/Files/{message.Chat.Id}");

            if (files.Length < 2)
            {
                return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
                    $"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ : {2 - files.Length}");
            }

            if (files.Length > 2)
            {
                Directory.Delete(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}", true);
                return await bot.SendTextMessageAsync(chatId: message.Chat.Id, $"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ");
            }
            
            var connector = new YandexConnector();

            var convertor = new Converter();
            var resulFileName =
                @$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}{Path.DirectorySeparatorChar}result.wav-{Guid.NewGuid()}.wav";
            
            var isWindows = System.Runtime.InteropServices.RuntimeInformation
                .IsOSPlatform(OSPlatform.Windows);

            var validationMessage = isWindows
                ? convertor.GenerateLPCM(files[0], files[1], resulFileName)
                : await convertor.GenerateLPCMUnix(files[0], files[1], resulFileName);
            
            if (!string.IsNullOrEmpty(validationMessage))
            {
                return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
                    $"{validationMessage}. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /clearStorage –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ");
            }

            await bot.SendTextMessageAsync(chatId: message.Chat.Id,
                "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.");
            
            var shortFileName = Path.GetFileName(resulFileName);

            await connector.SendAudioInObjectStorage(resulFileName);

            //var url = connector.GetFileURL(shortFileName);
            var url = $"https://storage.yandexcloud.net/my-bucet/{shortFileName}";

            var response = await connector.SendSpeechToTextRequest(url);

            await _yandexRequestRepository.Insert(new YandexRequest()
            {
                UserChatId = message.Chat.Id,
                IsDone = false,
                YandexRequestId = response.id
            });

            return await Task.FromResult(new Message());

            await Task.Delay(10_000);

            var resp = await connector.TryGetToTextResponse(response.id);

            var trascribition = resp.GetTextFromResponse();

            await File.WriteAllTextAsync(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}{Path.DirectorySeparatorChar}result.txt",
                trascribition);

            await using var fs =
                File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}{Path.DirectorySeparatorChar}result.txt");
            {
                await bot.SendDocumentAsync(message.Chat.Id,
                    new InputOnlineFile(fs, "result.txt"));
                fs.Close();
            }

            Directory.Delete(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}", true);

            return await Task.FromResult(new Message());

            //return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
            //  trascribition);
        }
        
        return await Task.FromResult(new Message());
    }

    async Task<Message> OnClearStorage(ITelegramBotClient bot, Message message)
    {
        Directory.Delete( @$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}", true);

        return await bot.SendTextMessageAsync(chatId: message.Chat.Id, $"–§–∞–π–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –æ—á–∏—â–µ–Ω—ã");
    }

    async Task<Message> OnStorageInfo(ITelegramBotClient bot, Message message)
    {
        if (!Directory.Exists(@$"{AppDomain.CurrentDomain.BaseDirectory}Files{Path.DirectorySeparatorChar}{message.Chat.Id}"))
        {
            return await bot.SendTextMessageAsync(chatId: message.Chat.Id, $"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.");
        }

        var files = Directory.GetFiles($"{AppDomain.CurrentDomain.BaseDirectory}/Files/{message.Chat.Id}");

        if (!files.Any())
        {
            return await bot.SendTextMessageAsync(chatId: message.Chat.Id, $"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.");
        }

        var fileNames = files.Select(x => Path.GetFileName(x).Split('-')[0]).ToList();
        
        return await bot.SendTextMessageAsync(chatId: message.Chat.Id, $"–§–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: {string.Join(Environment.NewLine, fileNames)}");
    }
    
    async Task<Message> Usage(ITelegramBotClient bot, Message message)
    {
        await Usage2(bot, message);

        await bot.SendMediaGroupAsync(chatId: message.Chat.Id, new[]
        {
            new InputMediaPhoto(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Usage1.jpg"),"Usage1.jpg")),
            new InputMediaPhoto(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Usage2.jpg"), "Usage2.jpg")),
            new InputMediaPhoto(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Usage3.jpg"), "Usage3.jpg")),
            new InputMediaPhoto(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Usage4.jpg"), "Usage4.jpg")),
            new InputMediaPhoto(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Usage5.jpg"), "Usage5.jpg")),
        });
        
        await bot.SendMediaGroupAsync(chatId: message.Chat.Id, new[]
        {
            new InputMediaAudio(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}audioDmitrySkvortsov21018473429.m4a"),"audioDmitrySkvortsov21018473429.m4a")),
            new InputMediaAudio(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}audioiPhone11018473429.m4a"), "audioiPhone11018473429.m4a")),
            //new InputMediaAudio(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}result.txt"), "result.txt"))
        });
        
        await bot.SendMediaGroupAsync(chatId: message.Chat.Id, new[]
        {
           new InputMediaDocument(new InputMedia(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}result.txt"), "result.txt"))
        });
        
        return await bot.SendTextMessageAsync(message.Chat.Id, "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å @skvrtsv");
    }

    public async Task<Message> OnTopUp(ITelegramBotClient bot, Message message)
    {
        return await bot.SendTextMessageAsync(message.Chat.Id, "–û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ –æ–Ω–ª–∞–π–Ω –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ü•≤ " + Environment.NewLine 
            +"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É "+ Environment.NewLine +" *4274 3200 6020 3554*" + Environment.NewLine 
            + "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω @skvrtsv", ParseMode.Markdown);
    }
    
    public async Task<Message> OnBalance(ITelegramBotClient bot, Message message)
    {
        if (await _userRepository.IsUserExists(message.Chat.Id))
        {
            var user = await _userRepository.GetAsync(message.Chat.Id);
            
            return await bot.SendTextMessageAsync(message.Chat.Id, $"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å : *{user.Balance}*", ParseMode.Markdown);
        }

        return await Task.FromResult(new Message());
    }

    async Task<Message> Help(ITelegramBotClient bot, Message message)
    {
        var commands = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:" + Environment.NewLine
                                                  + "/run - –∑–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤" + Environment.NewLine
                                                  + "/clearStorage - –æ—Ç—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ñ–∞–π–ª–æ–≤" + Environment.NewLine
                                                  + "/storageInfo - –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é" +
                                                  Environment.NewLine
                                                  + "/usage - FAQ" + Environment.NewLine 
                                                  + "/topup - –ø–æ–ø–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" + Environment.NewLine 
                                                  + "/balance - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å";
        // + "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å @skvrtsv";

        return await bot.SendTextMessageAsync(message.Chat.Id, commands);
    }
    
    async Task<Message> Usage2(ITelegramBotClient bot, Message message)
    {
        var welcomeMessage =  "–î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã –≥–æ–ª–æ—Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª. –î–ª—è —ç—Ç–æ–≥–æ: " + Environment. NewLine +
                                "1Ô∏è‚É£"+" –ó–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ZOOM." + Environment.NewLine
                             + "2Ô∏è‚É£" +@" –ü–µ—Ä–µ–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É *""–ó–∞–ø–∏—Å—å""*." + Environment.NewLine
                             + "3Ô∏è‚É£"+ @" –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –≤ *""–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞""*.";
        
        await bot.SendPhotoAsync(chatId: message.Chat.Id,
            new InputOnlineFile(File.OpenRead(@$"{AppDomain.CurrentDomain.BaseDirectory}Examples{Path.DirectorySeparatorChar}Init2.jpg")),
            caption: welcomeMessage,
            parseMode: ParseMode.Markdown);
    
        var usage =
            "–î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫–æ–≥–¥–∞ –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏." +
            Environment.NewLine
            +  "1Ô∏è‚É£"+" –ü–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö" + Environment.NewLine
            + "2Ô∏è‚É£" + " –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤–æ–Ω–∫—É" + Environment.NewLine
            + "3Ô∏è‚É£"+ @" –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É ""Audio Records"" " + Environment.NewLine
            + "4Ô∏è‚É£"+ " –û—Ç—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞ 2 —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—É –∏ –∏–Ω—Ç–µ—Ä–≤—å—é–∏—Ä—É–µ–º—ã–π" + Environment.NewLine + Environment.NewLine +
            "‚¨áÔ∏è‚¨áÔ∏è‚¨á–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏–∑ 2 –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ zoom –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"; 
        return await bot.SendTextMessageAsync(chatId: message.Chat.Id,
            text: usage,
            replyMarkup: new ReplyKeyboardRemove());
    }
    
    #region Inline Mode

    #endregion

    private Task UnknownUpdateHandlerAsync(Update update)
    {
        //_logger.LogInformation("Unknown update type: {UpdateType}", update.Type);
        return Task.CompletedTask;
    }

    public async Task HandleErrorAsync(ITelegramBotClient bot, Exception exception)
    {
        var ErrorMessage = exception switch
        {
            ApiRequestException apiRequestException => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        await bot.SendTextMessageAsync("669363145", ErrorMessage);
        
        _logger.LogInformation("HandleError: {ErrorMessage}", ErrorMessage);
    }
}